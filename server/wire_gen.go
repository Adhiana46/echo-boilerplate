// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package server

import (
	"github.com/Adhiana46/echo-boilerplate/internal/permission/data"
	"github.com/Adhiana46/echo-boilerplate/internal/permission/delivery/http"
	"github.com/Adhiana46/echo-boilerplate/internal/permission/repository"
	"github.com/Adhiana46/echo-boilerplate/internal/permission/usecase"
	data2 "github.com/Adhiana46/echo-boilerplate/internal/role/data"
	http2 "github.com/Adhiana46/echo-boilerplate/internal/role/delivery/http"
	repository2 "github.com/Adhiana46/echo-boilerplate/internal/role/repository"
	usecase2 "github.com/Adhiana46/echo-boilerplate/internal/role/usecase"
	data3 "github.com/Adhiana46/echo-boilerplate/internal/user/data"
	http3 "github.com/Adhiana46/echo-boilerplate/internal/user/delivery/http"
	repository3 "github.com/Adhiana46/echo-boilerplate/internal/user/repository"
	usecase3 "github.com/Adhiana46/echo-boilerplate/internal/user/usecase"
	"github.com/Adhiana46/echo-boilerplate/pkg/cache"
	"github.com/Adhiana46/echo-boilerplate/pkg/token-manager"
	"github.com/google/wire"
	"github.com/jmoiron/sqlx"
)

// Injectors from wire.go:

func InitializedPermissionHandler(db *sqlx.DB, cache2 cache.Cache, tokenManager *tokenmanager.TokenManager) http.Handler {
	permissionPersistent := data.NewPostgresPermissionPersistent(db)
	permissionRepository := repository.NewPermissionRepository(permissionPersistent)
	permissionUsecase := usecase.NewPermissionUsecase(permissionRepository)
	handler := http.NewPermissionHttpHandler(permissionUsecase)
	return handler
}

func InitializedRoleHandler(db *sqlx.DB, cache2 cache.Cache, tokenManager *tokenmanager.TokenManager) http2.Handler {
	rolePersistent := data2.NewPostgresRolePersistent(db)
	roleRepository := repository2.NewRoleRepository(rolePersistent)
	permissionPersistent := data.NewPostgresPermissionPersistent(db)
	permissionRepository := repository.NewPermissionRepository(permissionPersistent)
	roleUsecase := usecase2.NewRoleUsecase(roleRepository, permissionRepository)
	handler := http2.NewRoleHttpHandler(roleUsecase)
	return handler
}

func InitializedUserHandler(db *sqlx.DB, cache2 cache.Cache, tokenManager *tokenmanager.TokenManager) http3.Handler {
	userPersistent := data3.NewPostgresUserPersistent(db)
	rolePersistent := data2.NewPostgresRolePersistent(db)
	userRepository := repository3.NewUserRepository(userPersistent, rolePersistent)
	roleRepository := repository2.NewRoleRepository(rolePersistent)
	userDevicePersistent := data3.NewPostgresUserDevicePersistent(db)
	userDeviceRepository := repository3.NewUserDeviceRepository(userDevicePersistent)
	userUsecase := usecase3.NewUserUsecase(userRepository, roleRepository, userDeviceRepository, tokenManager)
	handler := http3.NewUserHttpHandler(userUsecase)
	return handler
}

// wire.go:

var ProviderSet = wire.NewSet(http.NewPermissionHttpHandler, http2.NewRoleHttpHandler, http3.NewUserHttpHandler, usecase.NewPermissionUsecase, usecase2.NewRoleUsecase, usecase3.NewUserUsecase, repository.NewPermissionRepository, repository2.NewRoleRepository, repository3.NewUserRepository, repository3.NewUserDeviceRepository, data.NewPostgresPermissionPersistent, data2.NewPostgresRolePersistent, data3.NewPostgresUserPersistent, data3.NewPostgresUserDevicePersistent)
